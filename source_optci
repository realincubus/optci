#!/bin/bash

function warning {
  echo -e "\e[34m"$@"\e[0m" 
}

export -f warning

function error {
  echo -e "\e[31m"$@"\e[0m" 
}
export -f error

function ok_message {
  echo -e "\e[32m"$@"\e[0m" 
}
export -f ok_message

# TODO add tx !!!!!!
function check_network_load {
  #echo "check network load"

  MAX_PACKETS=100

  interfaces=$(cd /sys/class/net; find . -maxdepth 1 | awk -F "./" '{print $2}' )
  #echo "interfaces $interfaces"

  load_ok="0"
  declare -a begin_rx
  declare -a begin_tx

  declare -a end_rx
  declare -a end_tx

  while [[ $load_ok == "0" ]]; do

    load_ok="1"

    ctr=0
    for interface in $interfaces; do
      #echo "interface $interface"
      begin_rx[ctr]=$(cat /sys/class/net/$interface/statistics/rx_packets)
      ctr=$((ctr+1))  
    done

    sleep 2

    ctr=0
    for interface in $interfaces; do
      #echo "interface $interface"
      end_rx[ctr]=$(cat /sys/class/net/$interface/statistics/rx_packets)
      #echo begin_rx $begin_rx[$interface] end_rx $end_rx[$interface]  

      #echo "${end_rx[$ctr]} - ${begin_rx[$ctr]} > $MAX_PACKETS"
      load=$(echo "${end_rx[$ctr]} - ${begin_rx[$ctr]} > $MAX_PACKETS" | bc -l)

      #echo "load $load"
      if [[ $load == "1" ]]; then
        load_ok="0"
        warning "Network load is still to high"
      fi
      ctr=$((ctr+1))  
    done
  
  done

  #echo "network load is ok"
  ok_message "Network Load -- Ok"
}

export -f check_network_load

function check_system_load {

  MAX_LOAD_1="0.10"
  load_ok="0"

  while [[ $load_ok == "0" ]]; do
    load_1=$(cat /proc/loadavg | awk '{ print $1 }')
    load_ok=$(echo $load_1'<='$MAX_LOAD_1 | bc -l)
    if [[ $load_ok == "0" ]]; then
      warning "waiting till load 1($load_1) decreases to $MAX_LOAD_1"
    fi
    sleep 1
  done
  ok_message "System Load -- Ok"
}

export -f check_system_load

function check_disk_load {

  sync

  MAX_BYTES=100

  disks=$(cd /sys/block/; find . -maxdepth 1 | awk -F "./" '{print $2}' )
  #echo "disks $disks"

  load_ok="0"
  declare -a begin_read
  declare -a begin_write

  declare -a end_read
  declare -a end_write

  while [[ $load_ok == "0" ]]; do

    load_ok="1"

    ctr=0
    for disk in $disks; do
      #echo "disk $disk"
      begin_read[ctr]=$(cat /sys/block/$disk/stat | awk '{ print $1 }')
      begin_write[ctr]=$(cat /sys/block/$disk/stat | awk '{ print $5 }')
      ctr=$((ctr+1))  
    done

    sleep 2

    ctr=0
    for disk in $disks; do
      end_read[ctr]=$(cat /sys/block/$disk/stat | awk '{print $1}')
      end_write[ctr]=$(cat /sys/block/$disk/stat | awk '{ print $5 }')
      #echo begin_read $begin_read[$disk] end_read $end_read[$disk]  
      #echo begin_write $begin_write[$disk] end_read $end_write[$disk]  

      #echo "${end_read[$ctr]} - ${begin_read[$ctr]} > $MAX_BYTES"
      read_load=$(echo "${end_read[$ctr]} - ${begin_read[$ctr]} > $MAX_BYTES" | bc -l)

      if [[ $read_load == "1" ]]; then
        load_ok="0"
        ios=$(echo "${end_read[$ctr]} - ${begin_read[$ctr]}" | bc)
        warning "Disk read load is still to high. read i/os $ios"
      fi

      #echo "${end_write[$ctr]} - ${begin_write[$ctr]} > $MAX_BYTES"
      write_load=$(echo "${end_write[$ctr]} - ${begin_write[$ctr]} > $MAX_BYTES" | bc -l)

      if [[ $write_load == "1" ]]; then
        load_ok="0"
        ios=$(echo "${end_write[$ctr]} - ${begin_write[$ctr]}" | bc)
        warning "disk write load is still to high. write i/os $ios"
      fi

      #echo "disk $disk $read_load $write_load"

      ctr=$((ctr+1))  
    done
  
  done
  ok_message "Disk Load -- Ok"
}

export -f check_disk_load

function disable_turbo_boost {
  echo "disabling turbo boost"
  # check for intel_pstate
  if [[ ! -e /sys/devices/system/cpu/intel_pstate/no_turbo ]]; then
    echo "can not disable turbo boost"
  fi
  echo "1" > /sys/devices/system/cpu/intel_pstate/no_turbo
}


export -f disable_turbo_boost

function enable_turbo_boost {
  echo "enabling turbo boost"
  # check for intel_pstate
  if [[ ! -e /sys/devices/system/cpu/intel_pstate/no_turbo ]]; then
    echo "can not enable turbo boost"
  fi
  echo "0" > /sys/devices/system/cpu/intel_pstate/no_turbo
}

export -f enable_turbo_boost

function clear_memory {
  echo "clearing memory not implemented right now"

}
export -f clear_memory

function drop_caches {
  echo 3 > /proc/sys/vm/drop_caches 
}

export -f drop_caches

function governor_set_performance {
  cpupower frequency-set -g performance > /dev/null
}

export -f governor_set_performance

function governor_set_powersave {
  cpupower frequency-set -g powersave > /dev/null
}

export -f governor_set_powersave

function OPTCI_PREPARE {

  clear_memory
  disable_turbo_boost
  governor_set_performance
  drop_caches

  check_disk_load
  check_network_load
  #check_system_load
}

export -f OPTCI_PREPARE

function OPTCI_CLEANUP {
  echo "restore env setups"

  enable_turbo_boost
  governor_set_powersave

}

export -f OPTCI_CLEANUP

function  OPTCI_RUN {
  START=$(date +%s.%N)
  # TODO change if needed to a file specified by the user
  "$@" > /dev/null
  END=$(date +%s.%N)
  DIFF=$(echo "$END - $START" | bc)
  echo "$DIFF"
}

export -f OPTCI_RUN

# convenience functions

function OPTCI_PIN_RUN {
  
  FIRST_SOCKET="1"
  SOCKETS_PATTERN=""
  for (( s = 0; s < $SOCKETS; s++ )); do
    TOTAL_CORES_PER_SOCKET=$(likwid-topology | grep "Cores per socket" | awk -F ":" ' {print $2}')
    CORES_PATTERN=""
    FIRST_CORE="1"
    for (( c = 0; c < $CORES_PER_SOCKET; c++ )); do
      for (( t = 0; t < $THREADS_PER_CORE; t++ )); do
        if [[ $FIRST_CORE == "1" ]]; then
          FIRST_CORE="0"
        else
          CORES_PATTERN="$CORES_PATTERN,"
        fi
        CORES_PATTERN="$CORES_PATTERN$(echo "$c + $t * $TOTAL_CORES_PER_SOCKET" | bc)"
      done
    done
    if [[ $FIRST_SOCKET == "1" ]]; then
      FIRST_SOCKET="0"
    else
      SOCKETS_PATTERN="$SOCKETS_PATTERN@"
    fi
    SOCKETS_PATTERN="$SOCKETS_PATTERN""S$s:$CORES_PATTERN"
  done

  LIKWID_PIN_PATTERN=$SOCKETS_PATTERN

  #CORES_PER_SOCKET="$((CORES_PER_SOCKET-1))"
  
  #LIKWID_PIN_PATTERN="S$SOCKETS:0-$CORES_PER_SOCKET"
  #if [[ $SOCKETS == "1" ]]; then
    #LIKWID_PIN_PATTERN="S0:0-$CORES_PER_SOCKET@S1:0-$CORES_PER_SOCKET"
  #fi
  echo likwid-pin -c $LIKWID_PIN_PATTERN $@  > pin.pattern
  START=$(date +%s.%N)
  likwid-pin -c $LIKWID_PIN_PATTERN $@ > /dev/null
  END=$(date +%s.%N)
  DIFF=$(echo "$END - $START" | bc)
  echo "$DIFF"
}

export -f OPTCI_PIN_RUN

function OPTCI_EXPORT {
  echo "export $1=$2" >> $ARTIFACT/optci_vars
}


export -f OPTCI_EXPORT

export OPTCI_ACCUMULATE_RESULT=bin_ra
